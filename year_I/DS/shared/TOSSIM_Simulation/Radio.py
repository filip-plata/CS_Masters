#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'Radio'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 6

# The Active Message type associated with this message.
AM_TYPE = 57

class Radio(tinyos.message.Message.Message):
    # Create a new Radio of size 6.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=6):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <Radio> \n"
        try:
            s += "  [messageID=0x%x]\n" % (self.get_messageID())
        except:
            pass
        try:
            s += "  [senderID=0x%x]\n" % (self.get_senderID())
        except:
            pass
        try:
            s += "  [receiverID=0x%x]\n" % (self.get_receiverID())
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: messageID
    #   Field type: long
    #   Offset (bits): 0
    #   Size (bits): 32
    #

    #
    # Return whether the field 'messageID' is signed (False).
    #
    def isSigned_messageID(self):
        return False
    
    #
    # Return whether the field 'messageID' is an array (False).
    #
    def isArray_messageID(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'messageID'
    #
    def offset_messageID(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'messageID'
    #
    def offsetBits_messageID(self):
        return 0
    
    #
    # Return the value (as a long) of the field 'messageID'
    #
    def get_messageID(self):
        return self.getUIntElement(self.offsetBits_messageID(), 32, 1)
    
    #
    # Set the value of the field 'messageID'
    #
    def set_messageID(self, value):
        self.setUIntElement(self.offsetBits_messageID(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'messageID'
    #
    def size_messageID(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'messageID'
    #
    def sizeBits_messageID(self):
        return 32
    
    #
    # Accessor methods for field: senderID
    #   Field type: short
    #   Offset (bits): 32
    #   Size (bits): 8
    #

    #
    # Return whether the field 'senderID' is signed (False).
    #
    def isSigned_senderID(self):
        return False
    
    #
    # Return whether the field 'senderID' is an array (False).
    #
    def isArray_senderID(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'senderID'
    #
    def offset_senderID(self):
        return (32 / 8)
    
    #
    # Return the offset (in bits) of the field 'senderID'
    #
    def offsetBits_senderID(self):
        return 32
    
    #
    # Return the value (as a short) of the field 'senderID'
    #
    def get_senderID(self):
        return self.getUIntElement(self.offsetBits_senderID(), 8, 1)
    
    #
    # Set the value of the field 'senderID'
    #
    def set_senderID(self, value):
        self.setUIntElement(self.offsetBits_senderID(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'senderID'
    #
    def size_senderID(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'senderID'
    #
    def sizeBits_senderID(self):
        return 8
    
    #
    # Accessor methods for field: receiverID
    #   Field type: short
    #   Offset (bits): 40
    #   Size (bits): 8
    #

    #
    # Return whether the field 'receiverID' is signed (False).
    #
    def isSigned_receiverID(self):
        return False
    
    #
    # Return whether the field 'receiverID' is an array (False).
    #
    def isArray_receiverID(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'receiverID'
    #
    def offset_receiverID(self):
        return (40 / 8)
    
    #
    # Return the offset (in bits) of the field 'receiverID'
    #
    def offsetBits_receiverID(self):
        return 40
    
    #
    # Return the value (as a short) of the field 'receiverID'
    #
    def get_receiverID(self):
        return self.getUIntElement(self.offsetBits_receiverID(), 8, 1)
    
    #
    # Set the value of the field 'receiverID'
    #
    def set_receiverID(self, value):
        self.setUIntElement(self.offsetBits_receiverID(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'receiverID'
    #
    def size_receiverID(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'receiverID'
    #
    def sizeBits_receiverID(self):
        return 8
    
